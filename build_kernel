#!/usr/bin/env bash
# shellcheck disable=SC2199
# shellcheck source=/dev/null
#
# Copyright (C) 2020-22 UtsavBalar1231 <utsavbalar1231@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

KBUILD_COMPILER_STRING=$($HOME/tc/proton-clang/bin/clang --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')
KBUILD_LINKER_STRING=$($HOME/tc/proton-clang/bin/ld.lld --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//' | sed 's/(compatible with [^)]*)//')
export KBUILD_COMPILER_STRING
export KBUILD_LINKER_STRING

#
# Enviromental Variables
#

DATE=$(date '+%Y%m%d-%H%M')
DEVICE="munch"

# Set our directory
OUT_DIR=out/

# Select LTO or non LTO builds
if [[ "$@" =~ "aosp" ]]; then
    VERSION="OOF-${DEVICE^^}-AOSP-${DATE}"
    if [[ "$@" =~ "aospa"* ]]; then
	VERSION="OOF-${DEVICE^^}-AOSPA-${DATE}"
    fi
else
    VERSION="OOF-${DEVICE^^}-MIUI-${DATE}"
fi

# Export Zip name
export ZIPNAME="${VERSION}.zip"

# How much kebabs we need? Kanged from @raphielscape :)
if [[ -z "${KEBABS}" ]]; then
    COUNT="$(grep -c '^processor' /proc/cpuinfo)"
    export KEBABS="$((COUNT + 2))"
fi

echo "Jobs: ${KEBABS}"

ARGS="ARCH=arm64 \
O=${OUT_DIR} \
LLVM=1 \
CLANG_TRIPLE=aarch64-linux-gnu- \
CROSS_COMPILE=aarch64-linux-gnu- \
CROSS_COMPILE_COMPAT=arm-linux-gnueabi- \
-j${KEBABS}"

dts_source=arch/arm64/boot/dts/vendor/qcom

function enable_lto() {
    scripts/config --file ${OUT_DIR}/.config \
        -e LTO_CLANG

    # Make olddefconfig
    cd ${OUT_DIR} || exit
    make -j${KEBABS} ${ARGS} olddefconfig
    cd ../ || exit
}

function disable_lto() {
    scripts/config --file ${OUT_DIR}/.config \
        -d LTO_CLANG

    # Make olddefconfig
    cd ${OUT_DIR} || exit
    make -j${KEBABS} ${ARGS} olddefconfig
    cd ../ || exit
}

START=$(date +"%s")

# Set compiler Path
export PATH="$HOME/tc/proton-clang/bin:$PATH"
export LD_LIBRARY_PATH=${HOME}/tc/proton-clang/lib64:$LD_LIBRARY_PATH

# Make defconfig
make -j${KEBABS} ${ARGS} vendor/"${DEVICE}"_user_defconfig

# Enable LTO
if [[ "$@" =~ "lto"* ]]; then
    enable_lto
fi

if [[ "$@" =~ "aosp"* ]]; then
	if [[ "$@" =~ "aospa"* ]];then
		echo "------ Starting AOSPA Build ------"
	else
		echo "------ Starting AOSP Build ------"
	fi
else
	echo "------ Starting MIUI Build ------"
fi

# Make defconfig
make -j${KEBABS} ${ARGS} vendor/"${DEVICE}"_user_defconfig

# FIXME: disable LTO on MIUI
if [[ "$@" =~ "lto"* ]]; then
    disable_lto
fi

if [[ "$@" =~ "aosp"* ]]; then
scripts/config --file out/.config	\
    -e LOCALVERSION_AUTO	\
    -e TOUCHSCREEN_COMMON	\
    --set-str STATIC_USERMODEHELPER_PATH /system/bin/micd	\
    -d IPC_LOGGING	\
    -d KPERFEVENTS	\
    -d MIGT	\
    -d MIHW	\
    -d MILLET	\
    -d MIGT_ENERGY_MODEL	\
    -d MIUI_ZRAM_MEMORY_TRACKING	\
    -d MI_RECLAIM	\
    -d PACKAGE_RUNTIME_INFO	\
    -d PERF_HUMANTASK	\
    -d PERF_CRITICAL_RT_TASK	\
    -d SF_BINDER	\
    -d TASK_DELAY_ACCT

    if [[ "$@" =~ "aospa"* ]]; then
	scripts/config --file out/.config	\
	-d SDCARD_FS	\
	-e UNICODE
    fi
    sed -i "/FORTIFY_SOURCE/d" out/.config
    sed -i 's/<1546>/<155>/g' ${dts_source}/dsi-panel-l11r-38-08-0a-dsc-cmd.dtsi
    sed -i 's/<695>/<70>/g' ${dts_source}/dsi-panel-l11r-38-08-0a-dsc-cmd.dtsi
fi

# Make olddefconfig
cd ${OUT_DIR} || exit
make -j${KEBABS} ${ARGS} CC="ccache clang" HOSTCC="ccache gcc" HOSTCXX="cache g++" olddefconfig
cd ../ || exit

make -j${KEBABS} ${ARGS} CC="ccache clang" HOSTCC="ccache gcc" HOSTCXX="ccache g++" 2>&1 | tee build.log

find ${OUT_DIR}/$dts_source -name '*.dtb' -exec cat {} + >${OUT_DIR}/arch/arm64/boot/dtb
git checkout arch/arm64/boot/dts/vendor &>/dev/null

if [[ "$@" =~ "aosp"* ]]; then
        if [[ "$@" =~ "aospa"* ]];then
                echo "------ Finishing AOSPA Build ------"
        else
		echo "------ Finishing AOSP Build ------"
	fi
else
	echo "------ Finishing MIUI Build ------"
fi

END=$(date +"%s")
DIFF=$((END - START))
zipname="$VERSION.zip"
if [ -f "out/arch/arm64/boot/Image" ] && [ -f "out/arch/arm64/boot/dtbo.img" ]; then
	git clone -q https://github.com/amackpro/AnyKernel3
	cp out/arch/arm64/boot/Image AnyKernel3
	cp out/arch/arm64/boot/dtb AnyKernel3
	cp out/arch/arm64/boot/dtbo.img AnyKernel3
	rm -f *zip
	cd AnyKernel3
	sed -i "s/is_slot_device=0/is_slot_device=auto/g" anykernel.sh
	zip -r9 "../${zipname}" * -x '*.git*' README.md *placeholder >> /dev/null
	cd ..
	rm -rf AnyKernel3
	echo -e "\nCompleted in $((SECONDS / 60)) minute(s) and $((SECONDS % 60)) second(s) !"
	echo ""
	echo -e ${zipname} " is ready!"
	echo ""
else
	echo -e "\n Compilation Failed!"
fi
